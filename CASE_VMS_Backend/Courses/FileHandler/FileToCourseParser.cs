using CASE_VMS_Backend.Courses.Models;
using CASE_VMS_Backend.Courses.Repository.Interfaces;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;

namespace CASE_VMS_Backend.Courses.FileHandler
{
    public class FileToCourseParser : IFileToCourseParser
    {
        public FileToCourseParser(ICourseRepository courseRepo, ICourseInstanceRepository courseInstanceRepository)
        {
            this._courseRepo = courseRepo;
            this._courseInstanceRepo = courseInstanceRepository;
        }

        private ICourseRepository _courseRepo { get; }
        private ICourseInstanceRepository _courseInstanceRepo { get; }

        public List<WrapperModel> CourseWrappers { get; set; }

        /// <summary>
        /// List of the CourseModels generated by the last time ParseFile was ran.
        /// </summary>
        public List<CourseModel> Courses { get; set; } = new();

        /// <summary>
        /// List of the DTO's generated by the last time ParseFile was ran.
        /// </summary>
        public List<CourseResponseDTO> CourseResponseDTOs { get; set; } = new();

        /// <summary>
        /// List of the Instances generated by the last time ParseFile was ran.
        /// </summary>
        public List<CourseInstance> CourseInstances { get; set; } = new();

        /// <summary>
        /// Parses a .txt file and eventually adds it to the Database.
        /// </summary>
        /// <param name="file">The .txt file to parse</param>
        /// <returns>Returns a list of the duplicates {Course, Instance}</returns>
        public virtual List<int> ParseFile(IFormFile file)
        {
            CourseWrappers = new List<WrapperModel>();
            var courseWrapper = new WrapperModel();

            if (file.Length == 0)
            {
                throw new Exception("File is empty");
            }
            if (Path.GetExtension(file.FileName) != ".txt")
            {
                throw new Exception("File is not a .txt file");

            }

            using (var reader = new StreamReader(file.OpenReadStream()))
            {
                while (reader.Peek() >= 0)
                {
                    switch (reader.ReadLine())
                    {
                        case string a when a.Contains("Titel:"):
                            courseWrapper.Title = a.Split(":")[1];
                            break;
                        case string b when b.Contains("Cursuscode:"):
                            courseWrapper.CourseCode = b.Split(":")[1];
                            break;
                        case string c when c.Contains("Duur:"):
                            courseWrapper.Duration = int.Parse(Regex.Match(c.Split(":")[1], @"\d+").Value);
                            break;
                        case string d when d.Contains("Startdatum:"):
                            courseWrapper.StartDate = DateTime.Parse(d.Split(":")[1].Trim(), new CultureInfo("nl-NL"));
                            break;
                        case string e when string.IsNullOrWhiteSpace(e):
                            CourseWrappers.Add(courseWrapper);
                            courseWrapper = new WrapperModel();
                            break;
                    }

                }
                CourseWrappers.Add(courseWrapper);
            }

            return ParseWrappers();
        }
        /// <summary>
        /// Parses the wrappers into Course objects and CourseResponseDTO's to be used.
        /// Course objects and DTO's can be accessed in this class with Courses and CourseResponseDTOs
        /// </summary>
        /// <returns>Returns a list of the duplicates {Course, Instance}</returns>
        public virtual List<int> ParseWrappers()
        {
            foreach (var wrapper in CourseWrappers)
            {
                var Course = new CourseModel(durationInDays: wrapper.Duration, courseTitle: wrapper.Title, courseCode: wrapper.CourseCode);
                var CourseResponse = new CourseResponseDTO(duration: wrapper.Duration, title: wrapper.Title, startDate: DateOnly.FromDateTime(wrapper.StartDate));
                var CourseInstance = new CourseInstance(startTime: DateOnly.FromDateTime(wrapper.StartDate), course: Course);
                Courses.Add(Course);
                CourseResponseDTOs.Add(CourseResponse);
                CourseInstances.Add(CourseInstance);
            }
            return PushToDataBase();
        }

        /// <summary>
        /// Will update the database, checking for duplicate entries
        /// </summary>
        /// <returns>Returns a list of the duplicates {Course, Instance}</returns>
        public List<int> PushToDataBase()
        {
            int AmountOfCourseDuplicates = 0;
            int AmountOfInstanceDuplicates = 0;
            foreach (var course in Courses)
            {
                try
                {
                    _courseRepo.AddAsync(course);
                }
                catch
                {
                    AmountOfCourseDuplicates++;
                    continue;
                }

            }
            foreach (var instance in CourseInstances)
            {
                try
                {
                    _courseInstanceRepo.AddAsync(instance);
                }
                catch
                {
                    AmountOfInstanceDuplicates++;
                    continue;
                }
            }
            return new List<int>() { AmountOfCourseDuplicates, AmountOfInstanceDuplicates };
        }

    }
}
